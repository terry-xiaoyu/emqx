##--------------------------------------------------------------------
## Listeners
##--------------------------------------------------------------------
listeners:

  mqtt_tcp:
    ## MQTT/TCP - TCP Listener for MQTT Protocol
    - name: mqtt_over_tcp
      ## The IP address and port that the listener will bind.
      ##
      ## Value: IP:Port | Port
      ##
      ## Examples: 1883, 127.0.0.1:1883, ::1:1883
      bind: 0.0.0.0:1883

      ## The MQTT connection configs this listener will use.
      ##
      ## All the clients connected to this listener will use the MQTT
      ## configs defined by the specific zone name.
      ##
      ## See 'mqtt.yaml' for details of all MQTT zones.
      ##
      ## It will use the 'default' zone if not set.
      #mqtt_zone: default

      ## Enable SSL
      ##
      ## Value: on | off
      ##
      ## Defaults to 'off'
      #enable_ssl: off

      ## The acceptor pool for this listener.
      ##
      ## Value: Number
      acceptors: 8

      ## Maximum connections per second.
      ##
      ## Value: Number
      max_conn_rate: 1000

      ## Maximum number of concurrent connections.
      ##
      ## Value: Number
      max_connections: 1024000

      ## The access control rules for this listener.
      ##
      ## See: https://github.com/emqtt/esockd#allowdeny
      ##
      ## Value: ACL Rule
      ##
      ## Example:
      ##
      ## access_rules:
      ##   - allow 192.168.0.0/24
      ##
      #access_rules:
      #  - allow all

      ## Specify the {active, N} option for this Socket.
      ##
      ## Value: Number
      #active_n: 100

      ## Enable the Proxy Protocol V1/2 if the EMQ X cluster is deployed
      ## behind HAProxy or Nginx.
      ##
      ## See: https://www.haproxy.com/blog/haproxy/proxy-protocol/
      ##
      ## Value: on | off
      #proxy_protocol: on

      ## Sets the timeout for proxy protocol. EMQ X will close the TCP connection
      ## if no proxy protocol packet recevied within the timeout.
      ##
      ## Value: Duration
      #proxy_protocol_timeout: 3s

      ## TCP Options
      ## This will override the global 'tcp_options' config
      #tcp_options:
        #backlog: 1024
        #send_timeout: 15s

    ## MQTT/SSL - SSL Listener for MQTT Protocol
    - name: mqtt_over_ssl

      ## The IP address and port this listener will bind.
      ##
      ## Value: IP:Port | Port
      ##
      ## Examples: 8883, 127.0.0.1:8883, ::1:8883
      bind: 8883

      ## The MQTT connection configs this listener will use.
      ##
      ## All the clients connected to this listener will use the MQTT
      ## configs defined by the specific zone name.
      ##
      ## See 'mqtt.yaml' for details of all MQTT zones.
      ##
      ## It will use the 'default' zone if not set.
      #mqtt_zone: default

      ## Enable SSL
      ##
      ## Value: on | off
      ##
      ## Defaults to 'off'
      enable_ssl: on

      ## The acceptor pool for this listener.
      ##
      ## Value: Number
      acceptors: 16

      ## Maximum connections per second.
      ##
      ## Value: Number
      max_conn_rate: 1000

      ## Maximum number of concurrent connections.
      ##
      ## Value: Number
      max_connections: 102400

      ## Specify the {active, N} option for the Socket.
      ##
      ## Value: Number
      #active_n: 100

      ## The access control rules for this listener.
      ##
      ## See: https://github.com/emqtt/esockd#allowdeny
      ##
      ## Value: ACL Rule
      ##
      ## Example:
      ##
      ## access_rules:
      ##   - allow 192.168.0.0/24
      ##
      #access_rules:
      #  - allow all

      ## Enable the Proxy Protocol V1/2 if the EMQ cluster is deployed behind
      ## HAProxy or Nginx.
      ##
      ## Value: on | off
      #proxy_protocol: on

      ## Sets the timeout for proxy protocol.
      ##
      ## See: listener.tcp.$name.proxy_protocol_timeout
      ##
      ## Value: Duration
      #proxy_protocol_timeout: 3s

      ## SSL Options
      ## This will override the global 'ssl_options' config
      #ssl_options:
        #keyfile: {{ platform_etc_dir }}/certs/key.pem
        #certfile: {{ platform_etc_dir }}/certs/cert.pem
        #cacertfile: {{ platform_etc_dir }}/certs/cacert.pem

      ## TCP Options
      ## This will override the global 'tcp_options' config
      #tcp_options:
        #backlog: 1024
        #send_timeout: 15s

    - name: internal_mqtt_over_tcp
      bind: 127.0.0.1:11883
      mqtt_zone: internal
      acceptors: 4
      max_connections: 1024000
      max_conn_rate: 1000
      active_n: 1000
      tcp_options:
        backlog: 512
        send_timeout: 5s
        send_timeout_close: on
        recbuf: 64KB
        sndbuf: 64KB
        buffer: 16KB

  mqtt_ws:

    ## WebSocket listener for MQTT protocol
    - name : mqtt_over_websocket

      ## The IP address and port this listener will bind.
      ##
      ## Value: IP:Port | Port
      ##
      ## Examples: 8083, 127.0.0.1:8083, ::1:8083
      bind: 8083

      ## The MQTT connection configs this listener will use.
      ##
      ## All the clients connected to this listener will use the MQTT
      ## configs defined by the specific zone name.
      ##
      ## See 'mqtt.yaml' for details of all MQTT zones.
      ##
      ## It will use the 'default' zone if not set.
      #mqtt_zone: default

      ## Enable SSL
      ##
      ## Value: on | off
      ##
      ## Defaults to 'off'
      #enable_ssl: off

      ## The path of WebSocket MQTT endpoint
      ##
      ## Value: URL Path
      mqtt_path: /mqtt

      ## The acceptor pool for this listener.
      ##
      ## Value: Number
      acceptors: 4

      ## Maximum connections per second.
      ##
      ## Value: Number
      max_conn_rate: 1000

      ## Maximum number of concurrent connections.
      ##
      ## Value: Number
      max_connections: 102400

      ## Simulate the {active, N} option for the connections.
      ##
      ## Value: Number
      #active_n: 100

      ## The access control rules for this listener.
      ##
      ## See: https://github.com/emqtt/esockd#allowdeny
      ##
      ## Value: ACL Rule
      ##
      ## Example:
      ##
      ## access_rules:
      ##   - allow 192.168.0.0/24
      ##
      #access_rules:
      #  - allow all

      ## Enable the Proxy Protocol V1/2 if the EMQ cluster is deployed behind
      ## HAProxy or Nginx.
      ##
      ## Value: on | off
      #proxy_protocol: on

      ## Sets the timeout for proxy protocol.
      ##
      ## Value: Duration
      #proxy_protocol_timeout: 3s

      ## Whether a WebSocket message is allowed to contain multiple MQTT packets
      ##
      ## Value: single | multiple
      #mqtt_piggyback: multiple

      ## TCP Options
      ## This will override the global 'tcp_options' config
      #tcp_options:
        #backlog: 1024
        #send_timeout: 15s

      ## TCP Options
      ## This will override the global 'websocket_options' config
      #websocket_options:
        #compress: true
        #max_frame_size: 0

    ## WebSocket with SSL listener for MQTT Protocol
    - name: mqtt_over_websocket_ssl

      ## The IP address and port this listener will bind.
      ##
      ## Value: IP:Port | Port
      ##
      ## Examples: 8084, 127.0.0.1:8084, ::1:8084
      bind: 8084

      ## The MQTT connection configs this listener will use.
      ##
      ## All the clients connected to this listener will use the MQTT
      ## configs defined by the specific zone name.
      ##
      ## See 'mqtt.yaml' for details of all MQTT zones.
      ##
      ## It will use the 'default' zone if not set.
      #mqtt_zone: default

      ## Enable SSL
      ##
      ## Value: on | off
      ##
      ## Defaults to 'off'
      enable_ssl: on

      ## The path of WebSocket MQTT endpoint
      ##
      ## Value: URL Path
      mqtt_path: /mqtt

      ## The acceptor pool for this listener.
      ##
      ## Value: Number
      acceptors: 4

      ## Maximum connections per second.
      ##
      ## Value: Number
      max_conn_rate: 1000

      ## Maximum number of concurrent connections.
      ##
      ## Value: Number
      max_connections: 102400

      ## Simulate the {active, N} option for the connections.
      ##
      ## Value: Number
      #active_n: 100

      ## The access control rules for this listener.
      ##
      ## See: https://github.com/emqtt/esockd#allowdeny
      ##
      ## Value: ACL Rule
      ##
      ## Example:
      ##
      ## access_rules:
      ##   - allow 192.168.0.0/24
      ##
      #access_rules:
      #  - allow all

      ## Enable the Proxy Protocol V1/2 support.
      ##
      ## Value: on | off
      #proxy_protocol: on

      ## Sets the timeout for proxy protocol.
      ##
      ## Value: Duration
      #proxy_protocol_timeout: 3s

      ## Whether a WebSocket message is allowed to contain multiple MQTT packets
      ##
      ## Value: single | multiple
      #mqtt_piggyback: multiple

      ## SSL Options
      ## This will override the global 'ssl_options' config
      #ssl_options:
        #keyfile: {{ platform_etc_dir }}/certs/key.pem
        #certfile: {{ platform_etc_dir }}/certs/cert.pem
        #cacertfile: {{ platform_etc_dir }}/certs/cacert.pem

      ## TCP Options
      ## This will override the global 'tcp_options' config
      #tcp_options:
        #backlog: 1024
        #send_timeout: 15s

      ## TCP Options
      ## This will override the global 'websocket_options' config
      #websocket_options:
        #compress: true
        #max_frame_size: 0

##--------------------------------------------------------------------
## Global Socket Options
##--------------------------------------------------------------------

## Socket options for TCP connections
tcp_options:
  ## TCP backlog for the connections.
  ##
  ## See listener.tcp.$name.backlog
  ##
  ## Value: Number >= 0
  #backlog: 1024

  ## The TCP send timeout for the connections.
  ##
  ## See listener.tcp.$name.send_timeout
  ##
  ## Value: Duration
  send_timeout: 15s

  ## Close the connection if send timeout.
  ##
  ## See: listener.tcp.$name.send_timeout_close
  ##
  ## Value: on | off
  #send_timeout_close: on

  ## The TCP receive buffer(os kernel) for the connections.
  ##
  ## See: listener.tcp.$name.recbuf
  ##
  ## Value: Bytes
  recbuf: 4KB

  ## The TCP send buffer(os kernel) for the connections.
  ##
  ## See: listener.tcp.$name.sndbuf
  ##
  ## Value: Bytes
  sndbuf: 4KB

  ## The size of the user-level software buffer used by the driver.
  ##
  ## See: listener.tcp.$name.buffer
  ##
  ## Value: Bytes
  buffer: 4KB

  ## Sets the 'buffer: max(sndbuf, recbuf)' if this option is enabled.
  ##
  ## See: listener.tcp.$name.tune_buffer
  ##
  ## Value: on | off
  #tune_buffer: off

  ## The TCP_NODELAY flag for the connections.
  ##
  ## See: listener.tcp.$name.nodelay
  ##
  ## Value: true | false
  #nodelay: true

  ## The SO_REUSEADDR flag for the connections.
  ##
  ## Value: true | false
  #reuseaddr: true

## Socket options for SSL connections
ssl_options:
  ## A performance optimization setting, it allows clients to reuse
  ## pre-existing sessions, instead of initializing new ones.
  ## Read more about it here.
  ##
  ## See: http://erlang.org/doc/man/ssl.html
  ##
  ## Value: on | off
  reuse_sessions: on

  ## SSL parameter renegotiation is a feature that allows a client and a server
  ## to renegotiate the parameters of the SSL connection on the fly.
  ## RFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,
  ## you drop support for the insecure renegotiation, prone to MitM attacks.
  ##
  ## Value: on | off
  #secure_renegotiate: off

  ## An important security setting, it forces the cipher to be set based
  ## on the server-specified order instead of the client-specified order,
  ## hence enforcing the (usually more properly configured) security
  ## ordering of the server administrator.
  ##
  ## Value: on | off
  #honor_cipher_order: on

  ## TLS versions only to protect from POODLE attack.
  ##
  ## See: http://erlang.org/doc/man/ssl.html
  ##
  ## Value: String, seperated by ','
  ## tls_versions: tlsv1.2,tlsv1.1,tlsv1

  ## TLS Handshake timeout.
  ##
  ## Value: Duration
  handshake_timeout: 15s

  ## Path to the file containing the user's private PEM-encoded key.
  ##
  ## See: http://erlang.org/doc/man/ssl.html
  ##
  ## Value: File
  keyfile: {{ platform_etc_dir }}/certs/key.pem

  ## Path to a file containing the user certificate.
  ##
  ## See: http://erlang.org/doc/man/ssl.html
  ##
  ## Value: File
  certfile: {{ platform_etc_dir }}/certs/cert.pem

  ## Path to the file containing PEM-encoded CA certificates. The CA certificates
  ## are used during server authentication and when building the client certificate chain.
  ##
  ## Value: File
  cacertfile: {{ platform_etc_dir }}/certs/cacert.pem

  ## The Ephemeral Diffie-Helman key exchange is a very effective way of
  ## ensuring Forward Secrecy by exchanging a set of keys that never hit
  ## the wire. Since the DH key is effectively signed by the private key,
  ## it needs to be at least as strong as the private key. In addition,
  ## the default DH groups that most of the OpenSSL installations have
  ## are only a handful (since they are distributed with the OpenSSL
  ## package that has been built for the operating system it’s running on)
  ## and hence predictable (not to mention, 1024 bits only).
  ## In order to escape this situation, first we need to generate a fresh,
  ## strong DH group, store it in a file and then use the option above,
  ## to force our SSL application to use the new DH group. Fortunately,
  ## OpenSSL provides us with a tool to do that. Simply run:
  ## openssl dhparam -out dh-params.pem 2048
  ##
  ## Value: File
  #dhfile: {{ platform_etc_dir }}/certs/dh-params.pem

  ## A server only does x509-path validation in mode verify_peer,
  ## as it then sends a certificate request to the client (this
  ## message is not sent if the verify option is verify_none).
  ## You can then also want to specify option fail_if_no_peer_cert.
  ## More information at: http://erlang.org/doc/man/ssl.html
  ##
  ## Value: verify_peer | verify_none
  #verify: verify_peer

  ## Used together with {verify, verify_peer} by an SSL server. If set to true,
  ## the server fails if the client does not have a certificate to send, that is,
  ## sends an empty certificate.
  ##
  ## Value: true | false
  #fail_if_no_peer_cert: true

  ## This is the single most important configuration option of an Erlang SSL
  ## application. Ciphers (and their ordering) define the way the client and
  ## server encrypt information over the wire, from the initial Diffie-Helman
  ## key exchange, the session key encryption ## algorithm and the message
  ## digest algorithm. Selecting a good cipher suite is critical for the
  ## application’s data security, confidentiality and performance.
  ##
  ## The cipher list above offers:
  ##
  ## A good balance between compatibility with older browsers.
  ## It can get stricter for Machine-To-Machine scenarios.
  ## Perfect Forward Secrecy.
  ## No old/insecure encryption and HMAC algorithms
  ##
  ## Most of it was copied from Mozilla’s Server Side TLS article
  ##
  ## Value: Ciphers List
  ##
  ## If not set, following configuration will be used:
  ##
  ## ciphers:
  ##   - ECDHE-ECDSA-AES256-GCM-SHA384
  ##   - ECDHE-RSA-AES256-GCM-SHA384
  ##   - ECDHE-ECDSA-AES256-SHA384
  ##   - ECDHE-RSA-AES256-SHA384
  ##   - ECDHE-ECDSA-DES-CBC3-SHA
  ##   - ECDH-ECDSA-AES256-GCM-SHA384
  ##   - ECDH-RSA-AES256-GCM-SHA384
  ##   - ECDH-ECDSA-AES256-SHA384
  ##   - ECDH-RSA-AES256-SHA384
  ##   - DHE-DSS-AES256-GCM-SHA384
  ##   - DHE-DSS-AES256-SHA256
  ##   - AES256-GCM-SHA384
  ##   - AES256-SHA256
  ##   - ECDHE-ECDSA-AES128-GCM-SHA256
  ##   - ECDHE-RSA-AES128-GCM-SHA256
  ##   - ECDHE-ECDSA-AES128-SHA256
  ##   - ECDHE-RSA-AES128-SHA256
  ##   - ECDH-ECDSA-AES128-GCM-SHA256
  ##   - ECDH-RSA-AES128-GCM-SHA256
  ##   - ECDH-ECDSA-AES128-SHA256
  ##   - ECDH-RSA-AES128-SHA256
  ##   - DHE-DSS-AES128-GCM-SHA256
  ##   - DHE-DSS-AES128-SHA256
  ##   - AES128-GCM-SHA256
  ##   - AES128-SHA256
  ##   - ECDHE-ECDSA-AES256-SHA
  ##   - ECDHE-RSA-AES256-SHA
  ##   - DHE-DSS-AES256-SHA
  ##   - ECDH-ECDSA-AES256-SHA
  ##   - ECDH-RSA-AES256-SHA
  ##   - AES256-SHA
  ##   - ECDHE-ECDSA-AES128-SHA
  ##   - ECDHE-RSA-AES128-SHA
  ##   - DHE-DSS-AES128-SHA
  ##   - ECDH-ECDSA-AES128-SHA
  ##   - ECDH-RSA-AES128-SHA
  ##   - AES128-SHA
  ##
  #ciphers:
  #  - your-ciphers

  ## Ciphers for TLS PSK.
  ## Note that 'ciphers' and 'psk_ciphers' cannot
  ## be configured at the same time.
  ## See 'https://tools.ietf.org/html/rfc4279#section-2'.
  ## If not set, following configuration will be used:
  ##
  ## psk_ciphers:
  ##   - PSK-AES128-CBC-SHA
  ##   - PSK-AES256-CBC-SHA
  ##   - PSK-3DES-EDE-CBC-SHA
  ##   - PSK-RC4-SHA
  ##
  #psk_ciphers:
  #  - your-ciphers

## Socket options for websocket connections
websocket_options:
  ## The compress flag for external WebSocket connections.
  ##
  ## If this Value is set true,the websocket message would be compressed
  ##
  ## Value: true | false
  #compress: true

  ## The level of deflate options for external WebSocket connections.
  ##
  ## See: listener.ws.$name.deflate_opts.level
  ##
  ## Value: none | default | best_compression | best_speed
  #deflate_opts.level: default

  ## The mem_level of deflate options for external WebSocket connections.
  ##
  ## See: listener.ws.$name.deflate_opts.mem_level
  ##
  ## Valid range is 1-9
  #deflate_opts.mem_level: 8

  ## The strategy of deflate options for external WebSocket connections.
  ##
  ## See: listener.ws.$name.deflate_opts.strategy
  ##
  ## Value: default | filtered | huffman_only | rle
  #deflate_opts.strategy: default

  ## The deflate option for external WebSocket connections.
  ##
  ## See: listener.ws.$name.deflate_opts.server_context_takeover
  ##
  ## Value: takeover | no_takeover
  #deflate_opts.server_context_takeover: takeover

  ## The deflate option for external WebSocket connections.
  ##
  ## See: listener.ws.$name.deflate_opts.client_context_takeover
  ##
  ## Value: takeover | no_takeover
  #deflate_opts.client_context_takeover: takeover

  ## The deflate options for external WebSocket connections.
  ##
  ## See: listener.ws.$name.deflate_opts.server_max_window_bits
  ##
  ## Valid range is 8-15
  #deflate_opts.server_max_window_bits: 15

  ## The deflate options for external WebSocket connections.
  ##
  ## See: listener.ws.$name.deflate_opts.client_max_window_bits
  ##
  ## Valid range is 8-15
  #deflate_opts.client_max_window_bits: 15

  ## The idle timeout for external WebSocket connections.
  ##
  ## See: listener.ws.$name.idle_timeout
  ##
  ## Value: Duration
  idle_timeout: 60s

  ## The max frame size for external WebSocket connections.
  ##
  ##
  ## Value: Number
  #max_frame_size: 0
